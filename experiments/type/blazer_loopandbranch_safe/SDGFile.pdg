SDG "MoreSanity.loopAndbranch_safe(int,int)" root 54 {
ENTR 1 {
O entry;
V "MoreSanity.loopAndbranch_safe(int,int)";
P 4;
S "MoreSanity.java":0,0-0,0;
B "MoreSanity.loopAndbranch_safe(II)Z":-1;
Z 0;
C "Application";
HE 2;
HE 3;
HE 4;
HE 5;
HE 6;
HE 23;
PS 2;
PS 3;
PS 4;
PS 5;
CF 4;
CD 6;
CD 7;
CD 23;
CE 2;
CE 3;
CE 4;
CE 5;
}
EXIT 2 {
O exit;
V "MoreSanity.loopAndbranch_safe(int,int)";
T "Z";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<exit>":-2;
Z 0;
RF 65;
PO 62;
}
FRMO 3 {
O form-out;
V "_exception_";
T "Ljava/lang/Exception";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<exception>":-2;
CF 2: "exc";
PO 63;
}
FRMI 4 {
O form-in;
V "param 1 $a ";
T "I";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<param> 1":-2;
Z 0;
LD ["a", "i"];
CF 5;
DD 7;
DD 13;
DD 18;
DD 19;
}
FRMI 5 {
O form-in;
V "param 2 $taint ";
T "I";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<param> 2":-2;
Z 0;
LD ["taint"];
CF 6;
DD 6;
DD 11;
}
PRED 6 {
O IF;
V "if (p2 $taint  >= #(0)) goto 7";
T "Z";
P 4;
S "MoreSanity.java":5,0-5,0;
B "MoreSanity.loopAndbranch_safe(II)Z":3;
Z 0;
LU ["taint"];
HE 7;
HE 8;
HE 11;
HE 12;
HE 25;
CF 7;
CF 11;
CD 7;
CD 8;
CD 11;
CD 12;
CD 25;
}
EXPR 7 {
O assign;
V "PHI v13 = v12, p1 $a ";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<phi>":-8;
Z 0;
LD ["i"];
LU ["a"];
CF 8;
DD 8;
DD 9;
}
PRED 8 {
O IF;
V "if (v13 <= #(0)) goto 10";
T "Z";
P 4;
S "MoreSanity.java":6,0-6,0;
B "MoreSanity.loopAndbranch_safe(II)Z":7;
Z 0;
LU ["i"];
HE 9;
HE 10;
CF 9;
CF 23;
CD 7;
CD 9;
CD 10;
}
EXPR 9 {
O assign;
V "v12 = v13 + #(-1)";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":7,0-7,0;
B "MoreSanity.loopAndbranch_safe(II)Z":10;
Z 0;
LD ["i"];
LU ["i"];
CF 10;
DD 7;
}
NORM 10 {
O compound;
V "goto 7";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":7,0-7,0;
B "MoreSanity.loopAndbranch_safe(II)Z":13;
Z 0;
CF 7;
}
EXPR 11 {
O assign;
V "v6 = p2 $taint  + #(10)";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":11,0-11,0;
B "MoreSanity.loopAndbranch_safe(II)Z":19;
Z 0;
LD ["taint"];
LU ["taint"];
CF 12;
DD 12;
}
PRED 12 {
O IF;
V "if (v6 < #(10)) goto 30";
T "Z";
P 4;
S "MoreSanity.java":13,0-13,0;
B "MoreSanity.loopAndbranch_safe(II)Z":24;
Z 0;
LU ["taint"];
HE 13;
HE 14;
HE 17;
HE 18;
HE 24;
CF 13;
CF 18;
CD 13;
CD 14;
CD 17;
CD 18;
CD 24;
}
EXPR 13 {
O assign;
V "PHI v11 = v10, p1 $a ";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<phi>":-8;
Z 0;
LD ["j"];
LU ["a", "i"];
CF 14;
DD 14;
DD 15;
}
PRED 14 {
O IF;
V "if (v11 <= #(0)) goto 39";
T "Z";
P 4;
S "MoreSanity.java":15,0-15,0;
B "MoreSanity.loopAndbranch_safe(II)Z":30;
Z 0;
LU ["j"];
HE 15;
HE 16;
CF 15;
CF 17;
CD 13;
CD 15;
CD 16;
}
EXPR 15 {
O assign;
V "v10 = v11 + #(-1)";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":16,0-16,0;
B "MoreSanity.loopAndbranch_safe(II)Z":33;
Z 0;
LD ["j"];
LU ["j"];
CF 16;
DD 13;
}
NORM 16 {
O compound;
V "goto 30";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":16,0-16,0;
B "MoreSanity.loopAndbranch_safe(II)Z":36;
Z 0;
CF 13;
}
NORM 17 {
O compound;
V "goto 59";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":18,0-18,0;
B "MoreSanity.loopAndbranch_safe(II)Z":39;
Z 0;
CF 25;
}
PRED 18 {
O IF;
V "if (p1 $a  >= #(0)) goto 59";
T "Z";
P 4;
S "MoreSanity.java":19,0-19,0;
B "MoreSanity.loopAndbranch_safe(II)Z":43;
Z 0;
LU ["a", "i"];
HE 19;
HE 20;
CF 19;
CF 24;
CD 19;
CD 20;
}
EXPR 19 {
O assign;
V "PHI v9 = v8, p1 $a ";
P 4;
S "MoreSanity.java":0,0-0,0;
B "<phi>":-8;
Z 0;
LD ["k"];
LU ["a", "i"];
CF 20;
DD 20;
DD 21;
}
PRED 20 {
O IF;
V "if (v9 <= #(0)) goto 59";
T "Z";
P 4;
S "MoreSanity.java":21,0-21,0;
B "MoreSanity.loopAndbranch_safe(II)Z":49;
Z 0;
LU ["k"];
HE 21;
HE 22;
CF 21;
CF 24;
CD 19;
CD 21;
CD 22;
}
EXPR 21 {
O assign;
V "v8 = v9 + #(-1)";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":22,0-22,0;
B "MoreSanity.loopAndbranch_safe(II)Z":52;
Z 0;
LD ["k"];
LU ["k"];
CF 22;
DD 19;
}
NORM 22 {
O compound;
V "goto 49";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":22,0-22,0;
B "MoreSanity.loopAndbranch_safe(II)Z":55;
Z 0;
CF 19;
}
NORM 23 {
O compound;
V "return #(1)";
T "Z";
P 4;
S "MoreSanity.java":27,0-27,0;
B "MoreSanity.loopAndbranch_safe(II)Z":59;
Z 0;
CF 2;
DD 2;
}
NORM 24 {
O compound;
V "goto 59";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":3,0-3,0;
B "MoreSanity.loopAndbranch_safe(II)Z":0;
Z 0;
CF 25;
}
NORM 25 {
O compound;
V "goto 59";
T "Ljava/lang/Object";
P 4;
S "MoreSanity.java":3,0-3,0;
B "MoreSanity.loopAndbranch_safe(II)Z":0;
Z 0;
CF 23;
}
ENTR 54 {
O entry;
V "com.ibm.wala.FakeRootClass.fakeRootMethod()";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "com.ibm.wala.FakeRootClass.fakeRootMethod()V":-1;
Z 0;
C "Primordial";
HE 55;
HE 56;
HE 57;
PS 56;
CF 57;
CD 57;
CE 55;
CE 56;
}
EXIT 55 {
O exit;
V "com.ibm.wala.FakeRootClass.fakeRootMethod()";
T "V";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<exit>":-2;
Z 0;
}
FRMO 56 {
O form-out;
V "_exception_";
T "Ljava/lang/Exception";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<exception>":-2;
Z 0;
CF 55: "exc";
}
CALL 57 {
O call;
V "fakeWorldClinit()";
T "V";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "com.ibm.wala.FakeRootClass.fakeRootMethod()V":-1;
Z 0;
U "com.ibm.wala.FakeRootClass.fakeWorldClinit()V";
HE 58;
HE 59;
HE 64;
PS 58;
CF 58: "exc";
CF 64;
CD 59;
CE 58;
CE 64;
}
ACTO 58 {
O act-out;
V "ret _exception_";
T "Ljava/lang/Exception";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<exception>":-2;
Z 0;
CF 56: "exc";
DD 56;
}
CALL 59 {
O call;
V "v5 = loopAndbranch_safe(v3, v4)";
T "Z";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "com.ibm.wala.FakeRootClass.fakeRootMethod()V":-1;
Z 0;
HE 60;
HE 61;
HE 62;
HE 63;
PS 60;
PS 61;
PS 62;
PS 63;
CF 65;
CE 60;
CE 61;
CE 62;
CE 63;
CE 65;
CL 1: "virtual";
}
ACTI 60 {
O act-in;
V "param 1 [v3]";
T "I";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<param> 1":-2;
Z 0;
CF 61;
PI 4;
}
ACTI 61 {
O act-in;
V "param 2 [v4]";
T "I";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<param> 2":-2;
Z 0;
CF 59;
PI 5;
}
ACTO 62 {
O act-out;
V "ret 0";
T "Z";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<exit>":-2;
Z 0;
CF 55;
CF 63: "exc";
}
ACTO 63 {
O act-out;
V "ret _exception_";
T "Ljava/lang/Exception";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "<exception>":-2;
Z 0;
HE 65;
CF 56: "exc";
CE 65;
}
NORM 64 {
O compound;
V "many2many";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "com.ibm.wala.FakeRootClass.fakeRootMethod()V":-1;
Z 0;
CF 60;
DD 58;
}
NORM 65 {
O compound;
V "CALL_RET";
P 5;
S "com/ibm/wala/FakeRootClass.java":0,0-0,0;
B "com.ibm.wala.FakeRootClass.fakeRootMethod()V":-9;
Z 0;
CF 62;
}
Thread 0 {
Entry 54;
Exit 55;
Fork 0;
Join 0;
Context null;
Dynamic false;
}
}
